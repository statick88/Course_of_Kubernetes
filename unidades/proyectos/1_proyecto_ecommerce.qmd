:::{.justify}

# Ecommerce con FastAP

## Descripción del proyecto.

En este proyecto vamos a crear un ecommerce con FastAPI. Vamos a crear un sistema de autenticación, un sistema de productos y un sistema de carrito de compras. Vamos a utilizar Pydantic para validar los datos y SQLAlchemy para la base de datos. También vamos a utilizar JWT para la autenticación.

## Crear el proyecto.

Vamos a crear un proyecto de FastAPI. Para ello, vamos a crear un nuevo proyecto y luego vamos a instalar FastAPI y Uvicorn.

```bash
mkdir Ecommerce
cd ecommerce
```
Ahora vamos a crear un entorno virtual con el siguiente comando:

```bash
python -m venv env
```

Luego, vamos a activar el entorno virtual con el siguiente comando:

```bash
source env/bin/activate
```

Ahora vamos a instalar las dependencias de FastAPI y Uvicorn con el siguiente comando:

```bash
pip install fastapi Uvicorn
```

Ahora vamos a crear un archivo **main.py** con el siguiente código:

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

Ahora vamos a ejecutar el servidor con el siguiente comando:

```bash
uvicorn main:app --reload
```
:::{.callout-info}
Se recomienda organizar el proyecto, para ello antes de que sea más grande se puede dividir en módulos.

Podemos utilizar la siguiente estructura:

```bash
.
├── app
│   ├── __init__.py
│   ├── main.py
│   ├── models.py
│   ├── routers.py
│   ├── schemas.py
└── env

```
:::

## Crear el sistema de autenticación.

Vamos a crear un sistema de autenticación con FastAPI. Para ello, vamos a crear un sistema de autenticación con JWT. Vamos a utilizar Pydantic para validar los datos y SQLAlchemy para la base de datos.

Primero, vamos a instalar las dependencias de Pydantic y SQLAlchemy con el siguiente comando:

```bash
pip install Pydantic SQLAlchemy
```

Ahora vamos a crear un archivo **models.py** con el siguiente código:

```python
from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password = Column(String)
```

Ahora vamos a crear un archivo **schemas.py** con el siguiente código:

```python
from pydantic import BaseModel

class UserBase(BaseModel):
  username: str

class UserCreate(UserBase):
  password: str

class User(UserBase):
  id: int

class Token(BaseModel):
  access_token: str
  token_type: str
```

Ahora vamos a crear un archivo **crud.py** con el siguiente código:

```python
from sqlalchemy.orm import Session
from . import models, schemas
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

def get_user_by_username(db: Session, username: str):
    return db.query(models.User).filter(models.User.username == username).first()    

def create_user(db: Session, user: schemas.UserCreate):   
    hashed_password = pwd_context.hash(user.password)
    db_user = models.User(username=user.username, password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: Session, username: str, password: str):
    user = get_user_by_username(db, username)
    if not user:
        return False
    if not verify_password(password, user.password):
        return False
    return user
```

Ahora vamos a crear un archivo **database.py** con el siguiente código:

```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
```

Ahora vamos a crear un archivo **main.py** con el siguiente código:

```python
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session 
from . import models, schemas, crud, database 
from passlib.context import CryptContext

app = FastAPI()

def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.post("/token", response_model=schemas.Token)
def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    db = database.Session
    user = crud.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    return {"access_token": user.username, "token_type": "bearer"}

@app.post("/users/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    return crud.create_user(db=db, user=user)

@app.get("/users/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user
```

Ahora vamos a ejecutar el servidor con el siguiente comando:

```bash
uvicorn app.main:app --reload
```

Para probar los avances que se tiene hasta ahora es necesario utilizar herramientas como Postman o Insomnia. Sin enmbargo en este caso utilizaremos Thunder Client

Podemos utilizarlo desde Visual Studio Code

:::{.callout-info}
Para instalar Thunder Client en Visual Studio Code, debemos ir a la pestaña de extensiones y buscar Thunder Client, luego instalamos la extensión.
:::

Luego de instalar la extensión, vamos a la pestaña de Thunder Client y creamos una nueva petición POST con la siguiente URL:

```bash
http://localhost:8000/token
```

En el cuerpo de la petición vamos a enviar los siguientes datos:

```bash
{
"username": "admin",
"password": "admin"
}
```

Luego de enviar la petición, vamos a recibir un token de acceso. Ahora vamos a crear una nueva petición GET con la siguiente URL:

```bash
http://localhost:8000/users/1 
```

En la cabecera de la petición vamos a enviar el token de acceso que recibimos anteriormente. Luego de enviar la petición, vamos a recibir los datos del usuario con el id 1.

:::{.callout-info}
En este punto ya tenemos un sistema de autenticación con FastAPI. Ahora vamos a crear un sistema de productos.
:::


